Today's topics

Java Data Types  
JVM Architecture Introduction
Enter OOPs  -- encapsulation , data hiding
(class programming)

Revise
JDK(Java SE)  Vs JRE Vs JVM
Answer this
What are the legal access specifiers for data members & methods : private ,default,protected , public
What are the legal access specifiers for the class ? : default or public
Can single Java src file contain multiple classes ? : YES
Any rules regarding default class name & src file name ? No 
Any rules regarding public class name & src file name ? YES (public class MUST be stored in the src file with the SAME name)

What will happen?
Scanner sc;
int data=sc.nextInt();//javac err : javac DOES NOT allow accessing any un-inited variables.
boolean active;
System.out.println(active);//javac err : javac DOES NOT allow accessing any un-inited variables.

What's the rule ? : javac DOES NOT allow accessing any un-inited variables.

Can you write a java class wihout public static void main(String[] args) & compile it : YES
Can you write a java class wihout public static void main(String[] args) & run it : NO

Given folder structure
<day2> / <src>
<day2> / bin
If you have saved Test.java , containing class A  , under <src> , how will you compile n run it ?
cd sunbeam-oop-java\day2\src
javac -d ..\bin  Test.java
(-d : compiler option -- name of the dir , to place generated ,class files)
in case of no javac errs :
cd ..\bin
dir  : A.class
java A
 -----------------------------

1. Java Data Types 
boolean isSleeping=true;//or false

eg : byte b1=32;
Hex : 0x20
BInary : 00100000

byte b1=-32;
sop(b1);
Hex : 0x20
BInary : 00100000
Take 2's complement (=1's comple +1)
1's complement : 11011111
                       +            1
---------------------------------
                         11100000

byte : 8 bits
1 bit (MSB) : sign
7 bits
-2^7 (-128) --- 2^7 -1(127)



2. JVM Architecture overview

2.5 
Conversions regarding primitive types

Automatic conversions(widening ) ---Automatic promotions
byte--->short--->int---> long--->float--->double
char ---> int

long --->float ---is considered automatic type of conversion(since float data type can hold larger range of values than long data type)


Rules ---
src & destination - must be compatible, typically dest data type must be able to store larger magnitude of values than  that of src data type.

1. Any arithmetic operation involving byte,short  --- automatically promoted to --int

2. int & long ---> long
3. long & float ---> float
4. byte,short......& float & double----> double

Narrowing conversion --- forced conversion(type-casting)
eg --- 
double ---> int 
float --> long
double ---> float 




3. Revise Scanner

4. Enter OOP
refer to "regarding class n object"

Encapsulation -- Class Programming (refer to 
class,object,state,behaviour
Objective --
Create a class to represent 3D Box
class Box ---tight encapsulation(achieved by making all non static data members:instance vars private)
state -- width,height , depth --- double : private 
paramterized constr --3 arg constr.
Instance Methods(=non static methods)
1. To return Box details in String form (dimensions of Box)

method declaration --- access specifier(private/default/protected/public) , ret type , name , args
method definition --body

2. To return computed volume of the box.



this --keyword in java
"this" represents => current object reference
Usages
1. To un-hide instance variable from local variable.
eg : this.width=width;

2. To invoke constructor of the same class , from different constructor.
eg : this(side,side,side);


Create another class(for the purpose of separation)  : CreateBox --for  UI.
Add psvmain(..){...}
Use scanner --to accept box dims from user, create box instance.
display its details & volume.


