Today's Topics
Mem pic to understand run time polymorphism
Revise interfaces
Exception Handling 
Object class method :  equals 


Solve this.
public class TestInstanceInitBlock {
	private int i;
	public static void main(String[] args) {
		TestInstanceInitBlock t1=new TestInstanceInitBlock();
		TestInstanceInitBlock t2=new TestInstanceInitBlock(10);
	}
	{
		System.out.println(1);
	}
	public TestInstanceInitBlock() {
		System.out.println(2);
	}
	public TestInstanceInitBlock(int i) {
		super();
		System.out.println(3);
		this.i = i;
	}
}
-------------------------------
Revise 
What is an interface (i/f) : blue print for the implementation class
Why ? 
1. Complete abstraction
2. multiple inheritance
3. separation : loose coupling (separation between WHAT : specs vs HOW : imple)

Till JDK 1.7 : What does i/f  mainly contain ?
data members : public static final
methods : public abstract

Legal Relationships 
Can 1 class imple multiple i/fs : YES (implements)
Can 1 i/f extend from multiple i/fs : YES  (extends)
Can 1 class extend from multiple super classes : NO
Can 1 i/f be implemented by multiple imple classes ? : YES (implements)
Can imple class access i/f constants directly(w/o using i/fName.memberName) : YES
Can non imple class access i/f constants directly(w/o using i/fName.memberName) : NO

Objectives

1. Demo : Create a class implementing multiple i/fs .
Will you face ambiguity issue with extact duplicate behaviour ? : NO
Same Method names  with different signature : NO
Same Method names  same signature n different ret type : YES
2. Demo : Create a class implementing multiple i/fs .
Will you face ambiguity issue with duplicate data members ? YES 
How to resolve : using explicitly i/fName.memberName
3. Demo : 1 i/f extending multiple i/fs , n then write imple class
In order to create concrete imple class : MUST imple all inherited abstract behaviour.
4. Marker i/f : Empty (Tag i/f) i/f --NO data members n no methods
eg : Serializable , Cloneable
5. Functional i/f : i/f containing single abstract method (SAM)
6. Demo : Shapes scenario using i/f n abstract class.

7. Enter Exception Handling : 
What is Exception ? : run time error , detected by JVM (typically by main thread)
Why Exception handling ?
1. To allow the continuation of java app , even in case of run time errors.
2. Reduces the need for checking validation ret types.
3. Allows a Separation between business login n error handling

Flow , inheritance hierarchy , checked vs un checked excs
keywords : try, catch , finally , throw , throws , try-with-resources
Custom exceptions
Objective : Validate speed of running vehicle on a highway
min speed : 30
max speed : 80
Vehicle speed : 20 / 100 /60
This validation err : can not be detected by JVM.
Must be done by the prog : keyword : throw new SpeedOutOfRangeException("too slow / too fast");


8. Solve Vehicle equality assignment
Problem :
Create a class Vehicle , under the package : com.app.vehicles , to represent any vehicle. 
tight encapsulation
state(data members)  : registrationNo : int , color : String , price : double
registrationNo  MUST be unique (non duplicate) for any vehicle (primary Key : unique ID)
Get  complete state : toString

Create a class TestVehicle under the package "tester"
Accept details of 2 vehicles from user . 
Display "SAME" or "DIFFERENT" , in case of same or different reg nos.



